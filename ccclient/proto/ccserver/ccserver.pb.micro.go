// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ccserver/ccserver.proto

package ccserver

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Ccserver service

type CcserverService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Ccserver_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Ccserver_PingPongService, error)
}

type ccserverService struct {
	c    client.Client
	name string
}

func NewCcserverService(name string, c client.Client) CcserverService {
	return &ccserverService{
		c:    c,
		name: name,
	}
}

func (c *ccserverService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ccserver.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccserverService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Ccserver_StreamService, error) {
	req := c.c.NewRequest(c.name, "Ccserver.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &ccserverServiceStream{stream}, nil
}

type Ccserver_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type ccserverServiceStream struct {
	stream client.Stream
}

func (x *ccserverServiceStream) Close() error {
	return x.stream.Close()
}

func (x *ccserverServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *ccserverServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *ccserverServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *ccserverServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ccserverService) PingPong(ctx context.Context, opts ...client.CallOption) (Ccserver_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Ccserver.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &ccserverServicePingPong{stream}, nil
}

type Ccserver_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type ccserverServicePingPong struct {
	stream client.Stream
}

func (x *ccserverServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *ccserverServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *ccserverServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *ccserverServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *ccserverServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *ccserverServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ccserver service

type CcserverHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Ccserver_StreamStream) error
	PingPong(context.Context, Ccserver_PingPongStream) error
}

func RegisterCcserverHandler(s server.Server, hdlr CcserverHandler, opts ...server.HandlerOption) error {
	type ccserver interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Ccserver struct {
		ccserver
	}
	h := &ccserverHandler{hdlr}
	return s.Handle(s.NewHandler(&Ccserver{h}, opts...))
}

type ccserverHandler struct {
	CcserverHandler
}

func (h *ccserverHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.CcserverHandler.Call(ctx, in, out)
}

func (h *ccserverHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.CcserverHandler.Stream(ctx, m, &ccserverStreamStream{stream})
}

type Ccserver_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type ccserverStreamStream struct {
	stream server.Stream
}

func (x *ccserverStreamStream) Close() error {
	return x.stream.Close()
}

func (x *ccserverStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *ccserverStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *ccserverStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *ccserverStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *ccserverHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.CcserverHandler.PingPong(ctx, &ccserverPingPongStream{stream})
}

type Ccserver_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type ccserverPingPongStream struct {
	stream server.Stream
}

func (x *ccserverPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *ccserverPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *ccserverPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *ccserverPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *ccserverPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *ccserverPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
