// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderserver.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderServer service

type OrderServerService interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequ, opts ...client.CallOption) (*CreateOrderResp, error)
	GetOrder(ctx context.Context, in *GetOrderRequ, opts ...client.CallOption) (*GetOrderResp, error)
}

type orderServerService struct {
	c    client.Client
	name string
}

func NewOrderServerService(name string, c client.Client) OrderServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &orderServerService{
		c:    c,
		name: name,
	}
}

func (c *orderServerService) CreateOrder(ctx context.Context, in *CreateOrderRequ, opts ...client.CallOption) (*CreateOrderResp, error) {
	req := c.c.NewRequest(c.name, "OrderServer.CreateOrder", in)
	out := new(CreateOrderResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServerService) GetOrder(ctx context.Context, in *GetOrderRequ, opts ...client.CallOption) (*GetOrderResp, error) {
	req := c.c.NewRequest(c.name, "OrderServer.GetOrder", in)
	out := new(GetOrderResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderServer service

type OrderServerHandler interface {
	CreateOrder(context.Context, *CreateOrderRequ, *CreateOrderResp) error
	GetOrder(context.Context, *GetOrderRequ, *GetOrderResp) error
}

func RegisterOrderServerHandler(s server.Server, hdlr OrderServerHandler, opts ...server.HandlerOption) error {
	type orderServer interface {
		CreateOrder(ctx context.Context, in *CreateOrderRequ, out *CreateOrderResp) error
		GetOrder(ctx context.Context, in *GetOrderRequ, out *GetOrderResp) error
	}
	type OrderServer struct {
		orderServer
	}
	h := &orderServerHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderServer{h}, opts...))
}

type orderServerHandler struct {
	OrderServerHandler
}

func (h *orderServerHandler) CreateOrder(ctx context.Context, in *CreateOrderRequ, out *CreateOrderResp) error {
	return h.OrderServerHandler.CreateOrder(ctx, in, out)
}

func (h *orderServerHandler) GetOrder(ctx context.Context, in *GetOrderRequ, out *GetOrderResp) error {
	return h.OrderServerHandler.GetOrder(ctx, in, out)
}
